{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/scijs/splines\">Splines</a><div class=\"contrib\"></div></h1>\n<p>Convenient and efficient B-splines. This package allows you to generate fairly efficient code for evaluating B-splines of arbitrary degree using <a href=\"http://en.wikipedia.org/wiki/De_Boor%27s_algorithm\">de Boor&apos;s algorithm</a>.</p>\n<p><a href=\"http://travis-ci.org/scijs/splines\"></a></p>\n<h2 id=\"example\">Example</h2>\n<p>Constructing and evaluating a second order B-spline:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;splines&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>splines</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;bspline&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>splines</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>bspline</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;vals&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>for</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;i</span><span class=\"keyword operator assignment js\"><span>=</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"keyword operator js\"><span>*</span></span><span class=\"constant numeric js\"><span>6</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;i</span><span class=\"keyword operator comparison js\"><span>&lt;=</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"keyword operator js\"><span>*</span></span><span class=\"constant numeric js\"><span>6</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;i</span><span class=\"keyword operator increment js\"><span>++</span></span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"variable other object js\"><span>vals</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>push</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>bspline</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>i</span><span class=\"keyword operator js\"><span>/</span></span><span class=\"constant numeric js\"><span>6</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js console\"><span>log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>vals</span><span class=\"meta brace round js\"><span>)</span></span></span></div>\n</code></pre>\n<h4 id=\"output\">Output</h4>\n<pre><code>[0,0,0,0,0,0,0,0,0,0,0.013888888888888902,0.05555555555555553,0.125,0.2222222222222222,\n0.34722222222222227,0.5,0.638888888888889,0.7222222222222222,0.75,0.7222222222222222,\n0.638888888888889,0.5,0.3472222222222223,0.22222222222222213,0.125,0.055555555555555455,\n0.013888888888888937,0,0,0,0,0,0,0,0,0,0]\n</code></pre><h2 id=\"api\">API</h2>\n<h4 id=\"-require-splines-bspline-n-period-\"><code>require(&quot;splines&quot;).bspline(n[, period])</code></h4>\n<p>Generates function for evaluating an <code>n</code>-th order B-spline.</p>\n<ul>\n<li><code>n</code> is the order of the B-spline (it should be integer-valued and greater than or equal to zero).</li>\n<li><code>period</code> is an optional period. Note, however, that (for the moment) this module only supports a period if the period is larger than or equal to the order of the spline+1 (which is the spatial support).</li>\n</ul>\n<p>Some benchmarks of different techniques: <a href=\"http://jsperf.com/bspline-evaluation\">http://jsperf.com/bspline-evaluation</a></p>\n<h2 id=\"license\">License</h2>\n<p>(c) 2013 Jasper van de Gronde. MIT License.</p>\n"}