{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/scijs/scijs-ndarray-for-matlab-users\">scijs/ndarray for MATLAB users</a><div class=\"contrib\"></div></h1>\n<blockquote>\n<p>Common <a href=\"https://github.com/scijs/ndarray\">scijs/ndarray</a> operations for people familar with MATLAB (or at least not familiar with <a href=\"https://github.com/scijs\">scijs</a>)</p>\n</blockquote>\n<h2 id=\"introduction\">Introduction</h2>\n<p>This document is a work in progress! Inspired by <a href=\"https://docs.scipy.org/doc/numpy-dev/user/numpy-for-matlab-users.html\">Numpy for Matlab users</a>, it aspires to be <a href=\"http://mathesaurus.sourceforge.net/matlab-numpy.html\">NumPy for MATLAB users</a>. The intent is both to communicate what is possible in JavaScript using scijs and to illuminate which parts still need work. I&apos;ll be mostly offline until the new year so I may not respond immediately, but comments, question and pull requests are more than welcome.</p>\n<h2 id=\"memory-management\">Memory Management</h2>\n<p>First things first, ndarrays are similar to but different to work with than MATLAB arrays. To get a sense for how managing ndarrays differs from managing MATLAB arrays, consider the diagonal of a 5&#xD7;5 matrix:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;pool&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>ndarray-scratch</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;diag&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>ndarray-diagonal</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;A&#xA0;5x5&#xA0;matrix&#xA0;of&#xA0;ones:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;a&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>pool</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>ones</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>5</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>5</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;A&#xA0;view&#xA0;of&#xA0;the&#xA0;diagonal&#xA0;of&#xA0;a:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;x&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>diag</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>a</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div>\n</code></pre>\n<p>Even though they have different dimensionality and shape, the internal data contained in ndarray <code>x</code> is identical by reference to that in <code>a</code>. The difference is that the strides and offsets of <code>x</code> are set to select only the diagonal elements of <code>a</code>. To see this directly, note the data of <code>x</code> still has 25 numbers even though it&apos;s shape is a vector of length 5:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js console\"><span>log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>x</span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;=&gt;&#xA0;View1dfloat64&#xA0;{</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;data:&#xA0;</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;Float64Array&#xA0;{&apos;0&apos;:&#xA0;1,&#xA0;&apos;1&apos;:&#xA0;1,&#xA0;&apos;2&apos;:&#xA0;1,&#xA0;...,&#xA0;&apos;22&apos;:&#xA0;1,&#xA0;&apos;23&apos;:&#xA0;1,&#xA0;&apos;24&apos;:&#xA0;1&#xA0;},</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;shape:&#xA0;[&#xA0;5&#xA0;],</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;stride:&#xA0;[&#xA0;6&#xA0;],</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;offset:&#xA0;0&#xA0;}</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<p>Cloning simplifies the representation by allocating new storage and copying only the elements exposed by view <code>x</code>:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js console\"><span>log</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"variable other object js\"><span>pool</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>clone</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>x</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;=&gt;&#xA0;View1dfloat64&#xA0;{</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;data:&#xA0;Float64Array&#xA0;{&#xA0;&apos;0&apos;:&#xA0;1,&#xA0;&apos;1&apos;:&#xA0;1,&#xA0;&apos;2&apos;:&#xA0;1,&#xA0;&apos;3&apos;:&#xA0;1,&#xA0;&apos;4&apos;:&#xA0;1&#xA0;},</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;shape:&#xA0;[&#xA0;5&#xA0;],</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;stride:&#xA0;[&#xA0;1&#xA0;],</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;offset:&#xA0;0&#xA0;}</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<p>As a result, a nice advantage of ndarrays the ability to manipulate representations without the need to iterate directly or allocate additional storage (beyond the lightweight ndarray wrapper). The example below uses in-place operations of <a href=\"https://github.com/scijs/ndarray-ops\">ndarray-ops</a> to assign the scalar 3 to the diagonal and double the first two columns of <code>a</code>:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;ops&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>ndarray-ops</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;show&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>ndarray-show</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;Set&#xA0;each&#xA0;element&#xA0;of&#xA0;the&#xA0;diagonal&#xA0;of&#xA0;a&#xA0;(5x5&#xA0;matrix&#xA0;of&#xA0;ones)&#xA0;to&#xA0;3:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>assigns</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>diag</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>a</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>3</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;Double&#xA0;the&#xA0;first&#xA0;two&#xA0;columns:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>mulseq</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"variable other object js\"><span>a</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>hi</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js console\"><span>log</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>show</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>a</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;=&gt;&#xA0;6.000&#xA0;&#xA0;&#xA0;&#xA0;2.000&#xA0;&#xA0;&#xA0;&#xA0;1.000&#xA0;&#xA0;&#xA0;&#xA0;1.000&#xA0;&#xA0;&#xA0;&#xA0;1.000</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;2.000&#xA0;&#xA0;&#xA0;&#xA0;6.000&#xA0;&#xA0;&#xA0;&#xA0;1.000&#xA0;&#xA0;&#xA0;&#xA0;1.000&#xA0;&#xA0;&#xA0;&#xA0;1.000</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;2.000&#xA0;&#xA0;&#xA0;&#xA0;2.000&#xA0;&#xA0;&#xA0;&#xA0;3.000&#xA0;&#xA0;&#xA0;&#xA0;1.000&#xA0;&#xA0;&#xA0;&#xA0;1.000</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;2.000&#xA0;&#xA0;&#xA0;&#xA0;2.000&#xA0;&#xA0;&#xA0;&#xA0;1.000&#xA0;&#xA0;&#xA0;&#xA0;3.000&#xA0;&#xA0;&#xA0;&#xA0;1.000</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;2.000&#xA0;&#xA0;&#xA0;&#xA0;2.000&#xA0;&#xA0;&#xA0;&#xA0;1.000&#xA0;&#xA0;&#xA0;&#xA0;1.000&#xA0;&#xA0;&#xA0;&#xA0;3.000</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h2 id=\"operations\">Operations</h2>\n<p>The table below collects common matlab operations as well as their ndarray analogs. Not all operations have a counterpart, some because of features and shortcomings of the JavaScript language, some because of differences in memory management, and some because they&apos;re simply not yet implemented.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">MATLAB</th>\n<th style=\"text-align:left\">JavaScript</th>\n<th style=\"text-align:left\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>ndims(a)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#arraydimension\"><code>a.dimension</code></a></td>\n<td style=\"text-align:left\">get the number of dimensions of <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>numel(a)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#arraysize\"><code>a.size</code></a></td>\n<td style=\"text-align:left\">get the number of elements of an arary</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>size(a)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#members\"><code>a.shape</code></a></td>\n<td style=\"text-align:left\">get the size of the array</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>size(a,n)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#members\"><code>a.shape</code></a><code>[n-1]</code></td>\n<td style=\"text-align:left\">get the number of elements of the n-th dimension of array <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>[1 2 3; 4 5 6 ]</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#constructor\"><code>ndarray</code></a><code>([1,2,3,4,5,6],[2,3])</code></td>\n<td style=\"text-align:left\">2&#xD7;3 matrix literal (using <code>Array</code> type)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#constructor\"><code>ndarray</code></a><code>(new Float64Array([1,2,3,4,5,6]),[2,3])</code></td>\n<td style=\"text-align:left\">2&#xD7;3 matrix literal (using 64-bit typed array)</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-pack\"><code>pack</code></a><code>([[1,2,3],[4,5,6]])</code></td>\n<td style=\"text-align:left\">2&#xD7;3 matrix literal from nested array</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a(end)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#arraygetij\"><code>a.get</code></a><code>(a.shape[0]-1)</code></td>\n<td style=\"text-align:left\">access last element in the 1&#xD7;n matrix <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a(2, 5)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#arraygetij\"><code>a.get</code></a><code>(1, 4)</code></td>\n<td style=\"text-align:left\">access element in second row, fifth column</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a(2, :)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#arraypickp0-p1-\"><code>a.pick</code></a><code>(1, null)</code></td>\n<td style=\"text-align:left\">entire second row of <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a(1:5, :)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#arrayhiijk\"><code>a.hi</code></a><code>(5, null)</code></td>\n<td style=\"text-align:left\">the first five rows of <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a(end-4:end, :)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#arrayloijk\"><code>a.lo</code></a><code>(a.shape[0]-5, null)</code></td>\n<td style=\"text-align:left\">the last five rows of <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a(1:3, 5:9)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#arrayhiijk\"><code>a.hi</code></a><code>(3, 9).lo(0, 4)</code></td>\n<td style=\"text-align:left\">rows one to three and columns five to nine of <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a([2, 4, 5], [1, 3])</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">rows 2, 4, and 5 and columns 1 and 3.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a(3:2:21, :)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#arrayhiijk\"><code>a.hi</code></a><code>(21, null).</code><a href=\"https://github.com/scijs/ndarray#arrayloijk\"><code>lo</code></a><code>(2, null).</code><a href=\"https://github.com/scijs/ndarray#arraystepijk\"><code>step</code></a><code>(2, 1)</code></td>\n<td style=\"text-align:left\">every other row of <code>a</code>, starting with the third and going to the twenty-first</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a(1:2:end, :)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#arraystepijk\"><code>a.step</code></a><code>(2, 1)</code></td>\n<td style=\"text-align:left\">every other row of <code>a</code>, starting with the first</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a(end:-1:1, :)</code> or <code>flipup(a)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#arraystepijk\"><code>a.step</code></a><code>(-1, 1)</code></td>\n<td style=\"text-align:left\"><code>a</code> with rows in reverse order</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a([1:end 1], :)</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"><code>a</code> with copy of the first rows appended to the end</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a.&apos;</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray#arraytransposep0-p1-\"><code>a.transpose</code></a><code>(1, 0)</code></td>\n<td style=\"text-align:left\">transpose of <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a&apos;</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">conjugate transpose of <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c = a * b</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndgemm\"><code>ndgemm</code></a><code>(c, a, b)</code></td>\n<td style=\"text-align:left\">matrix multiply</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c = a + b</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-ops\"><code>ops.add</code></a><code>(c, a, b)</code></td>\n<td style=\"text-align:left\">matrix addition</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c = a + 2</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-ops\"><code>ops.adds</code></a><code>(c, a, 2)</code></td>\n<td style=\"text-align:left\">matrix + scalar addition</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a += b</code> (not available in MATLAB)</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-ops\"><code>ops.addeq</code></a><code>(a, b)</code></td>\n<td style=\"text-align:left\">in-place matrix addition</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c = a .* b</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-ops\"><code>ops.mul</code></a><code>(c, a, b)</code></td>\n<td style=\"text-align:left\">element-wise multiply</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a = a .* b</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-ops\"><code>ops.muleq</code></a><code>(a, b)</code></td>\n<td style=\"text-align:left\">element-wise multiply (in-place)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c = a ./ b</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-ops\"><code>ops.div</code></a><code>(c, a, b)</code></td>\n<td style=\"text-align:left\">element-wise division</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a = a ./ b</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-ops\"><code>ops.diveq</code></a><code>(a, b)</code></td>\n<td style=\"text-align:left\">element-wise division (in-place)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a.^3</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-ops\"><code>ops.pows</code></a><code>(a, 3)</code></td>\n<td style=\"text-align:left\">element-wise scalar exponentiation</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>(a&gt;0.5)</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">matrix whose i,jth element is (a_ij &gt; 0.5)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>find(a&gt;0.5)</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">find the indices where (a &gt; 0.5)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a(:, find(v&gt;0.5))</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">extract the columns of a where vector v &gt; 0.5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a(a&lt;0.5)=0</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"><code>a</code> with elements less than 0.5 zeroed out</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a .* (a&gt;0.5)</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"><code>a</code> with elements less than 0.5 zeroed out</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a(:) = 3</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-ops\"><code>ops.assigns</code></a><code>(a, 3)</code></td>\n<td style=\"text-align:left\">set all values to the same scalar value</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>y = x</code></td>\n<td style=\"text-align:left\"><code>y =</code><a href=\"https://www.npmjs.com/package/ndarray-scratch#pool-clone-array\"><code>pool.clone</code></a><code>(x)</code></td>\n<td style=\"text-align:left\">clone by value</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>y = x(2, :)</code></td>\n<td style=\"text-align:left\"><code>y = x.pick(1, null)</code></td>\n<td style=\"text-align:left\">slices are by reference</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>1:10</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">create an increasing vector</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>0:9</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">create an increasing vector</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>zeros(3, 4)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-scratch#poolzerosshapedtype\"><code>pool.zeros</code></a><code>([3, 4], &apos;float64&apos;)</code></td>\n<td style=\"text-align:left\">3&#xD7;4 rand-2 array full of 64-bit floating point zeros</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>zeros(3, 4, 5)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-scratchpoolzerosshapedtype\"><code>pool.zeros</code></a><code>([3, 4, 5], &apos;float64&apos;)</code></td>\n<td style=\"text-align:left\">3&#xD7;4&#xD7;5 rank-3 array full of 64-bit floating point zeros</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ones(3, 4)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-scratch#poolonesshapedtype\"><code>pool.ones</code></a><code>([3, 4], &apos;float64&apos;)</code></td>\n<td style=\"text-align:left\">3&#xD7;4 rank-2 array full of 64-bit floating point ones</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>eye(3)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-scratch#pooleyeshapedtype\"><code>pool.eye</code></a><code>([3, 3], &apos;float64&apos;)</code></td>\n<td style=\"text-align:left\">3&#xD7;3 identity matrix with 64-bit floating point precision</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>diag(a)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-diagonal\"><code>diag</code></a><code>(a)</code></td>\n<td style=\"text-align:left\">vector of diagonal elements of <code>a</code> (returns diagonal by reference)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>diag(a, 0)</code></td>\n<td style=\"text-align:left\"><code>b =</code><a href=\"https://github.com/scijs/ndarray-scratch\"><code>pool.zeros</code></a><code>(a.shape)</code> <br> <a href=\"https://github.com/scijs/ndarray-ops\"><code>ops.assign</code></a><code>(</code><a href=\"https://github.com/scijs/ndarray-diagonal\"><code>diag</code></a><code>(b),</code><a href=\"https://github.com/scijs/ndarray-diagonal\"><code>diag</code></a><code>(a))</code></td>\n<td style=\"text-align:left\">square diagonal matrix whose nonzero values are the elements of a</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>rand(3, 4)</code></td>\n<td style=\"text-align:left\"><a href=\"https://www.npmjs.com/package/ndarray-fill\"><code>fill</code></a><code>(</code><a href=\"https://github.com/scijs/ndarray-scratch#poolmallocshape-dtype\"><code>pool.zeros</code></a><code>([3, 4]), Math.random)</code></td>\n<td style=\"text-align:left\">random 3&#xD7;4 matrix</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>linspace(1, 3, 4)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-linspace\"><code>linspace</code></a><code>(1, 3, 4)</code></td>\n<td style=\"text-align:left\">4 equally spaced samples between 1 and 3, inclusive</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>[x, y] = meshgrid(0:8, 0:5)</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">two 2D arrays: one of x values, one of y values</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>[x, y] = meshgrid([1, 2, 4], [2, 4, 5])</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>repmat(a, m, n)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-tile\"><code>tile</code></a><code>(a, [m, n])</code></td>\n<td style=\"text-align:left\">create m&#xD7;n copies of <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>[a b]</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">concatenate columns of <code>a</code> and <code>b</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>[a; b]</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-concat-rows\"><code>concatRows</code></a><code>([a, b])</code></td>\n<td style=\"text-align:left\">concatenate rows of <code>a</code> and <code>b</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>max(max(a))</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">maximum element of <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>max(a)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-ops#map-reduce-aggregate-operators\"><code>ops.max</code></a><code>(a)</code></td>\n<td style=\"text-align:left\">maximum element in <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>norm(v)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-ops#map-reduce-aggregate-operators\"><code>ops.norm2</code></a><code>(v)</code></td>\n<td style=\"text-align:left\">L2 norm of vector <code>v</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c = a &amp; b</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-ops#conventions\"><code>ops.band</code></a><code>(c, a, b)</code></td>\n<td style=\"text-align:left\">element-by-element AND operator</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>c = a</code></td>\n<td style=\"text-align:left\">b</td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-ops#conventions\"><code>ops.bor</code></a><code>(c, a, b)</code></td>\n<td>element-by-element OR operator</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>inv(a)</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">inverse of square matrix <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>pinv(a)</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">pseudo-inverse of matrix <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>rank(a)</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">rank of matrix <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>a\\b</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-lup-factorization\"><code>lup</code></a><code>(a, a, P)</code><br><a href=\"https://github.com/scijs/ndarray-lup-solve\"><code>solve</code></a><code>(a, a, P, b)</code></td>\n<td style=\"text-align:left\">solution of <code>a x = b</code> for <code>x</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>b/a</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">solution of <code>x a = b</code> for <code>x</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>chol(a)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-cholesky-factorization\"><code>chol</code></a><code>(a, L)</code></td>\n<td style=\"text-align:left\">cholesky factorization of matrix</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>[V, D] = eig(a)</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">eigenvalues and eigenvectors of <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>[V, D] = eig(a, b)</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">eigenvalues and eigenvectors of <code>a</code>, <code>b</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>[Q, R, P] = qr(a, 0)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-householder-qr#usage\"><code>qr.factor</code></a><code>(A, d)</code><br><a href=\"https://github.com/scijs/ndarray-householder-qr#usage\"><code>qr.constructQ</code></a><code>(A, Q)</code></td>\n<td style=\"text-align:left\">QR decomposition. (Depending on the use, you can likely use Q without constructing explicitly. <a href=\"https://github.com/scijs/ndarray-householder-qr#usage\">See documentation</a>.)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>[L, U, P] = lu(a)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-lup-factorization#requirendarray-lup-factorization-a-l-p-\"><code>lup</code></a><code>(A, L, P)</code></td>\n<td style=\"text-align:left\">LU decomposition</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fft(a)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-fft#requirendarray-fftdir-x-y\"><code>fft</code></a><code>(1, ar, ai)</code></td>\n<td style=\"text-align:left\">Fourier transform of <code>a</code>. Javascript does not have a complex type so real and imaginary parts must be passed separately.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ifft(a)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-fft#requirendarray-fftdir-x-y\"><code>fft</code></a><code>(-1, ar, ai)</code></td>\n<td style=\"text-align:left\">inverse Fourier transform of <code>a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>[b, I] = sortrows(a, i)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-sort\"><code>sort</code></a><code>(a)</code></td>\n<td style=\"text-align:left\">sort the rows of the matrix</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-sort\"><code>sort</code></a><code>(a.transpose(1, 0))</code></td>\n<td style=\"text-align:left\">sort the column of the matrix</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>regress(y, X)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-householder-qr#factor-a-d-\"><code>qr.factor</code></a><code>( A, d );</code><br> <a href=\"https://github.com/scijs/ndarray-householder-qr#solve-a-d-x-\"><code>qr.solve</code></a><code>( A, d, y );</code></td>\n<td style=\"text-align:left\">multilinear regression</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>decimate(x, q)</code></td>\n<td style=\"text-align:left\"><a href=\"https://github.com/scijs/ndarray-resample\"><code>resample</code></a><code>(output, input)</code></td>\n<td style=\"text-align:left\">downsample with low-pass filtering (<a href=\"https://github.com/scijs/ndarray-resample\"><code>resample</code></a> downsamples by a factor of two)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>unique</code></td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>squeeze(a)</code></td>\n<td style=\"text-align:left\"><a href=\"http://github.com/scijs/scijs-ndarray-for-matlab-users/blob/master/\"><code>squeeze</code></a><code>(a)</code></td>\n<td style=\"text-align:left\">Remove singleton dimensions of <code>a</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"license\">License</h2>\n<p>&#xA9; 2015 Ricky Reusser. MIT License. </p>\n"}