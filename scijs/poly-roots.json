{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/scijs/poly-roots\">poly-roots</a><div class=\"contrib\"></div></h1>\n<p><a href=\"https://travis-ci.org/scijs/poly-roots\"></a> <a href=\"http://badge.fury.io/js/poly-roots\"></a>  <a href=\"https://david-dm.org/scijs/poly-roots\"></a></p>\n<p>Find all <a href=\"http://en.wikipedia.org/wiki/Root_of_a_function\">roots</a> of a <a href=\"http://en.wikipedia.org/wiki/Polynomial\">polynomial</a> using the <a href=\"http://en.wikipedia.org/wiki/Jenkins%E2%80%93Traub_algorithm\">Jenkins-Traub method</a>. In other words, it <a href=\"http://en.wikipedia.org/wiki/Factorization_of_polynomials\">factorizes the polynomial</a> over the complex numbers.</p>\n<p><strong>N.B.: I fear I strayed too far toward translating cpoly while trying to understand the algorithm. It&apos;s similar enough to likely be covered under the original <a href=\"http://www.acm.org/publications/policies/softwarecrnotice\">ACM Software License Agreement</a>. Sorry.</strong></p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>This module factors a polynomial of the form </p>\n<p><img src=\"https://raw.githubusercontent.com/scijs/poly-roots/master/docs/images/poly.png\" alt=\"a0 * z^n + a1 * z^(n-1) + ... + a_n-1 z + a_n\">.</p>\n<p>It uses the <a href=\"http://en.wikipedia.org/wiki/Jenkins%E2%80%93Traub_algorithm\">Jenkins-Traub method</a>, and more specifically it&apos;s very nearly a line-by-line translation of the tried and true <a href=\"http://jblevins.org/mirror/amiller/cpoly.f90\">cpoly.f90</a>. No really, it&apos;s almost a direct translation, taking some leeway in reworking goto statements into javascript. I started off with a pretty naive implementation of the original paper, <a href=\"http://octopus.library.cmu.edu/Collections/traub62/box00027/fld00056/bdl0004/doc0001/doc_27b56f4b1.pdf\">A three-stage variable shift iteration for polynomial zeros and its relation to generalized Ralyeigh iteration</a> by M. A. Jenkins and J. F. Traub, 1968, but there are some serious shortcuts and simplifications you can take if you stop and think about what you&apos;re doing. So I gave up cleaning up and refactoring my own version and reworked an existing implementation into JavaScript.</p>\n<p>For a comparison to other SciJS poly root methods, see: <a href=\"https://github.com/rreusser/scijs-polynomial-roots-comparison\">scijs polynomial roots comparison</a>.</p>\n<p><strong>The good</strong>:</p>\n<ul>\n<li>It&apos;s reasonably fast</li>\n<li>It&apos;s numerically stable</li>\n<li>Memory usage is linear</li>\n<li>It benefits from the experimentation of the people who originally sat down and came up with a great implementation</li>\n<li>No dependencies</li>\n</ul>\n<p><strong>The bad</strong>:</p>\n<ul>\n<li>It&apos;s been translated by hand.</li>\n<li>The convergence criteria need a bit of work. I glossed over a couple subroutines that juggle some operations in order to prevent underflow errors, so I suspect the error estimates relative to machine epsilon aren&apos;t stricly accurate.</li>\n<li>It can maybe be translated better and more effectively via f2c + emscripten.</li>\n<li>The speed can be cut in half for polynomials with real coefficients by using the <a href=\"http://jblevins.org/mirror/amiller/rpoly.f90\">rpoly.f90</a> variant</li>\n</ul>\n<p>You can go do some research about good root-finders, but for a quick rundown of what you have to work with if you want to stick with JavaScript, see a <a href=\"https://github.com/rreusser/scijs-polynomial-roots-comparison\">quick benchmark</a>.</p>\n<h2 id=\"usage\">Usage</h2>\n<h4 id=\"-require-poly-roots-real_coeffs-imag_coeffs-\"><code>require(&apos;poly-roots&apos;)( real_coeffs [, imag_coeffs] )</code></h4>\n<p>Computes the roots of a polynomial given the coefficients in descending order.</p>\n<ul>\n<li><code>real_coeffs</code> the real coefficients of the polynomial arranged in order of decreasing degree</li>\n<li><code>imag_coeffs</code> (optional) the imaginary coefficients of the polynomial. If not specified, assumed to be zero</li>\n</ul>\n<p><strong>Returns</strong>:  A pair of vectors representing the real and imaginary parts of the roots of the polynomial</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;roots&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>poly-roots</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;Roots&#xA0;of&#xA0;x^2&#xA0;+&#xA0;2x&#xA0;-&#xA0;3:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;r1&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>roots</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;Roots&#xA0;of&#xA0;z^3&#xA0;-&#xA0;(4&#xA0;+&#xA0;i)z^2&#xA0;+&#xA0;(1&#xA0;+&#xA0;i)z&#xA0;+&#xA0;(6&#xA0;+&#xA0;2i):</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;r2&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>roots</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>4</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>6</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div>\n</code></pre>\n<h2 id=\"see-also\">See also</h2>\n<p>For the companion roots version that determines roots by solution of an eigenvalue problem (via numeric.js), see <a href=\"https://github.com/scijs/companion-roots\">companion-roots</a>.\nFor a blazing fast variant that might struggle in corner cases (like closely-spaced roots), see <a href=\"https://github.com/scijs/durand-kerner\">durand-kerner</a>.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>Since this inherits a lot from <code>cpoly.f90</code> and <code>cpoly.f90</code> in turn is an update of the original code from CACM 419, I&apos;m afraid that it may be subject to the <a href=\"http://www.acm.org/publications/policies/softwarecrnotice\">ACM Software License Agreement</a> which, in short, grants to you a royalty-free, nonexclusive right to execute, copy, modify and distribute both the binary and source code solely for academic, research and other similar noncommercial uses. :(</p>\n"}