{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/scijs/ndarray-householder-qr\">ndarray-householder-qr</a><div class=\"contrib\"></div></h1>\n<p><a href=\"https://travis-ci.org/scijs/ndarray-householder-qr\"></a> <a href=\"http://badge.fury.io/js/ndarray-householder-qr\"></a> <a href=\"https://david-dm.org/scijs/ndarray-householder-qr\"></a></p>\n<p>A module for calculating the in-place <a href=\"http://en.wikipedia.org/wiki/QR_decomposition\">QR decomposition</a> of an ndarray using Householder triangularization</p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>The algorithm is the Householder QR Factorization algorithm as found on p. 73 of Trefethen and Bau&apos;s <a href=\"http://www.amazon.com/Numerical-Linear-Algebra-Lloyd-Trefethen/dp/0898713617\">Numerical Linear Algebra</a>. In pseudocode, the algorithm is:</p>\n<pre><code>for k = 1 to n\n  x = A[k:m,k]\n  v_k = sign(x_1) ||x||_2 e_1 + x\n  v_k = v_k / ||v_k||_2\n  A[k:m,k:n] = A[k:m,k:n] - 2 v_k (v_k^* A[k:m,k:n])\n</code></pre><p>The specific implementation is based on the pseudocode from Walter Gander&apos;s <a href=\"http://www.inf.ethz.ch/personal/gander/papers/qrneu.pdf\">Algorithms for the QR-Decomposition</a>. This algorithm computes both R and the Householder reflectors in place, storing R in the upper-triangular portion of A, the diagonal of R in a separate vector and the Householder reflectors in the columns of A. To eliminate unnecessary operations, the Householder reflectors are normalized so that norm(v) = sqrt(2).</p>\n<h2 id=\"example\">Example</h2>\n<p>A straightforward example of the usefulness of QR factorization is the solution of least squares problems. To fit the model <code>y = a0 * x + a1</code> to the data points <code>[x1,y1] = [0,1]</code>, <code>[x2,y2] = [1,2]</code>, <code>[x3,y3] = [2,3]</code>: </p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;qr&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>ndarray-householder-qr</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;vander&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>ndarray-vandermonde</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;m&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>3</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;n&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;x&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>ndarray</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;&#xA0;&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;independent&#xA0;variable</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;y&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>ndarray</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;&#xA0;&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;data&#xA0;points</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;d&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>pool</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>zeros</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta brace square js\"><span>[</span></span><span>n</span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;A&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>vander</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>x</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>n</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>qr</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>factor</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>&#xA0;A</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;d&#xA0;</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>qr</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>solve</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>&#xA0;A</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;d</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;y&#xA0;</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;result:&#xA0;y&#xA0;=&#xA0;ndarray([&#xA0;1,&#xA0;1,&#xA0;0&#xA0;])&#xA0;--&gt;&#xA0;y&#xA0;=&#xA0;1&#xA0;*&#xA0;x&#xA0;+&#xA0;1</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<p>After this calculation, the factorization can be reused to solve for other inputs:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;y2&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>ndarray</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>4</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>qr</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>solve</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>&#xA0;A</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;d</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;y2&#xA0;</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;result:&#xA0;y&#xA0;=&#xA0;ndarray([&#xA0;2,&#xA0;1,&#xA0;0&#xA0;])&#xA0;--&gt;&#xA0;y&#xA0;=&#xA0;1&#xA0;*&#xA0;x&#xA0;+&#xA0;2</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<h2 id=\"usage\">Usage</h2>\n<h5 id=\"-factor-a-d-\"><code>factor( A, d )</code></h5>\n<p>Computes the in-place triangularization of <code>A</code>, returning the Householder reflectors in the lower-triangular portion of <code>A</code> (including the diagonal) and <code>R</code> in the upper-triangular portion of <code>A</code> (excluding diagonal) with the diagonal of <code>R</code> stored in <code>d</code>. <code>d</code> must be a one-dimensional vector with length at least <code>n</code>.</p>\n<h5 id=\"-multbyq-a-x-\"><code>multByQ( A, x )</code></h5>\n<p>Compute the product Q <em> x in-place, replacing x with Q </em> x. <code>A</code> is the in-place factored matrix.</p>\n<h5 id=\"-multbyqinv-a-x-\"><code>multByQinv( A, x )</code></h5>\n<p><code>A</code> is the in-place factored matrix. Compute the product <code>Q^-1 * x</code> in-place, replacing x with <code>Q^-1 * x</code>. Since the product is shorter than <code>x</code> for m &gt; n, the entries of <code>x</code> from n+1 to m will be zero.</p>\n<h5 id=\"-constructq-a-q-\"><code>constructQ( A, Q )</code></h5>\n<p>Given the in-place factored matrix A (diagonal not necessary), construct the matrix Q by applying the reflectors to a sequence of unit vectors. The dimensions of Q must be between m x n and m x m. When the dimensions of Q are m x n, Q corresponds to the Reduced QR Factorization. When the dimensions are m x m, Q corresponds to the Full QR Factorization.</p>\n<h5 id=\"-factor-a-q-\"><code>factor( A, Q )</code></h5>\n<p><strong>Incomplete</strong>\nCompute the in-place QR factorization of A, storing R in A and outputting Q in Q.</p>\n<h5 id=\"-solve-a-d-x-\"><code>solve( A, d, x )</code></h5>\n<p>Use the previously-calculated triangularization to find the vector x that minimizes the L-2 norm of (Ax - b). Note that the vector b is modified in the process.</p>\n<ul>\n<li><code>A</code> is the in-place factored matrix computed by <code>factor</code></li>\n<li><code>d</code> is the diagonal of <code>R</code> computed by <code>factor</code></li>\n<li><code>x</code> is the input vector of length m. The answer is computed in-place in the first n entries of <code>x</code>. The remaining entries are zero.</li>\n</ul>\n<h2 id=\"benchmarks\">Benchmarks</h2>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>$&#xA0;npm&#xA0;run&#xA0;bench</span></span></div>\n</code></pre>\n<h2 id=\"credits\">Credits</h2>\n<p>(c) 2015 Ricky Reusser. MIT License</p>\n"}