{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/scijs/ndarray-gram-schmidt-qr-complex\">ndarray-gram-schmidt-qr-complex</a><div class=\"contrib\"></div></h1>\n<p><a href=\"https://travis-ci.org/scijs/ndarray-gram-schmidt-qr-complex\"></a> <a href=\"http://badge.fury.io/js/ndarray-gram-schmidt-qr-complex\"></a></p>\n<p>A module for calculating the in-place <a href=\"http://en.wikipedia.org/wiki/QR_decomposition\">QR decomposition of a complex matrix</a></p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>The algorithm is the numerically stable variant of the Gram-Schmidt QR decomposition as found on p. 58 of Trefethen and Bau&apos;s <a href=\"http://www.amazon.com/Numerical-Linear-Algebra-Lloyd-Trefethen/dp/0898713617\">Numerical Linear Algebra</a>. In pseudocode, the algorithm is:</p>\n<pre><code>for i = 1 to n\n  v_i = a_i\n\nfor i = 1 to n\n  r_ii = ||v_i||\n  q_i = v_i / r_ii\n\n  for j = i+1 to n\n    r_ij = q_i&apos; * v_j\n    v_j = v_j - r_ij * q_i\n</code></pre><p>For real numbers, see <a href=\"https://github.com/scijs/ndarray-gram-schmidt-qr\">ndarray-gram-schmidt-qr</a>.</p>\n<h2 id=\"usage\">Usage</h2>\n<p>The algorithm currently only calculates the in-place QR decomposition and returns true on successful completion.</p>\n<pre><code>var qr = require(&apos;ndarray-gram-schmidt-qr-complex&apos;),\n    pool = require(&apos;ndarray-scratch&apos;);\n\nvar A_r = ndarray( new Float64Array([1,2,7,4,5,1,7,4,9]), [3,3] ),\n    A_i = ndarray( new Float64Array([9,3,2,4,4,0,4,1,1]), [3,3] ),\n    R_r = pool.zeros( A_r.shape, A_r.dtype );\n    R_i = pool.zeros( A_r.shape, A_r.dtype );\n\nqr( A_r, A_i, R_r, R_i );\n</code></pre><p>Then the product A * R is approximately equal to the original matrix.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>(c) 2015 Ricky Reusser. MIT License</p>\n"}