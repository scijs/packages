{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/scijs/ndarray\">ndarray</a><div class=\"contrib\"></div></h1>\n<p>Modular multidimensional arrays for JavaScript. </p>\n<p><a href=\"https://ci.testling.com/mikolalysenko/ndarray\">\n</a></p>\n<p><a href=\"http://travis-ci.org/mikolalysenko/ndarray\"></a></p>\n<p><a href=\"http://github.com/hughsk/stability-badges\"></a></p>\n<h5 id=\"browse-a-number-of-ndarray-compatible-modules-in-the-scijs-documentation-http-scijs-net-packages-\">Browse a number of ndarray-compatible modules in the <a href=\"http://scijs.net/packages\">scijs documentation</a></h5>\n<h5 id=\"coming-from-matlab-or-numpy-see-scijs-ndarray-for-matlab-users-https-github-com-scijs-scijs-ndarray-for-matlab-users-\">Coming from MATLAB or numpy? See: <a href=\"https://github.com/scijs/scijs-ndarray-for-matlab-users\">scijs/ndarray for MATLAB users</a></h5>\n<h5 id=\"-big-list-of-ndarray-modules-https-github-com-mikolalysenko-ndarray-wiki-ndarray-module-list-core-module-\"><a href=\"https://github.com/mikolalysenko/ndarray/wiki/ndarray-module-list#core-module\">Big list of ndarray modules</a></h5>\n<h2 id=\"introduction\">Introduction</h2>\n<p><code>ndarrays</code> provide higher dimensional views of 1D arrays.  For example, here is how you can turn a length 4 typed array into an nd-array:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;mat&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>ndarray</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta class instance constructor\"><span class=\"keyword operator new js\"><span>new</span></span><span>&#xA0;</span><span class=\"entity name type instance js\"><span>Float64Array</span></span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Now:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;mat&#xA0;=&#xA0;1&#xA0;0</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;0&#xA0;1</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<p>Once you have an nd-array you can access elements using <code>.set</code> and <code>.get</code>.  For example, here is an implementation of <a href=\"http://en.wikipedia.org/wiki/Conway&apos;s_Game_of_Life\">Conway&apos;s game of life</a> using ndarrays:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&#xA0;</span><span class=\"entity name function js\"><span>stepLife</span></span><span class=\"punctuation definition parameters begin js\"><span>(</span></span><span class=\"variable parameter function js\"><span>next_state</span></span><span class=\"meta object delimiter js\"><span>,</span></span><span>&#xA0;</span><span class=\"variable parameter function js\"><span>cur_state</span></span><span class=\"punctuation definition parameters end js\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation whitespace comment leading js\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Get&#xA0;array&#xA0;shape</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;nx&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>cur_state</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support constant dom js\"><span>shape</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ny&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>cur_state</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support constant dom js\"><span>shape</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation whitespace comment leading js\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Loop&#xA0;over&#xA0;all&#xA0;cells</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"keyword control js\"><span>for</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;i</span><span class=\"keyword operator assignment js\"><span>=</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;i</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>nx</span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"keyword operator increment js\"><span>++</span></span><span>i</span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"keyword control js\"><span>for</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;j</span><span class=\"keyword operator assignment js\"><span>=</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;j</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span>ny</span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"keyword operator increment js\"><span>++</span></span><span>j</span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation whitespace comment leading js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Count&#xA0;neighbors</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;n&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"keyword control js\"><span>for</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;dx</span><span class=\"keyword operator assignment js\"><span>=</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;dx</span><span class=\"keyword operator comparison js\"><span>&lt;=</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"keyword operator increment js\"><span>++</span></span><span>dx</span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"keyword control js\"><span>for</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;dy</span><span class=\"keyword operator assignment js\"><span>=</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;dy</span><span class=\"keyword operator comparison js\"><span>&lt;=</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"keyword operator increment js\"><span>++</span></span><span>dy</span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"keyword control js\"><span>if</span></span><span class=\"meta brace round js\"><span>(</span></span><span>dx&#xA0;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span>&#xA0;</span><span class=\"keyword operator logical js\"><span>&amp;&amp;</span></span><span>&#xA0;dy&#xA0;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"keyword control js\"><span>continue</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;n&#xA0;</span><span class=\"keyword operator assignment compound js\"><span>+=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>cur_state</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>get</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>i</span><span class=\"keyword operator js\"><span>+</span></span><span>dx</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;j</span><span class=\"keyword operator js\"><span>+</span></span><span>dy</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"punctuation whitespace comment leading js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Update&#xA0;state&#xA0;according&#xA0;to&#xA0;rule</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"keyword control js\"><span>if</span></span><span class=\"meta brace round js\"><span>(</span></span><span>n&#xA0;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>3</span></span><span>&#xA0;</span><span class=\"keyword operator logical js\"><span>||</span></span><span>&#xA0;n&#xA0;</span><span class=\"keyword operator comparison js\"><span>===</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>3</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>cur_state</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>get</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>i</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>j</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"variable other object js\"><span>next_state</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>set</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>i</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>j</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"meta brace curly js\"><span>}</span></span><span>&#xA0;</span><span class=\"keyword control js\"><span>else</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"variable other object js\"><span>next_state</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>set</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>i</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>j</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div>\n</code></pre>\n<p>You can also pull out views of ndarrays without copying the underlying elements.  Here is an example showing how to update part of a subarray:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;x&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>ndarray</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta class instance constructor\"><span class=\"keyword operator new js\"><span>new</span></span><span>&#xA0;</span><span class=\"entity name type instance js\"><span>Float32Array</span></span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant numeric js\"><span>25</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>5</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>5</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;y&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>x</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>hi</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>4</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>4</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>lo</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>for</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;i</span><span class=\"keyword operator assignment js\"><span>=</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;i</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span class=\"variable other object js\"><span>y</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support constant dom js\"><span>shape</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"keyword operator increment js\"><span>++</span></span><span>i</span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"keyword control js\"><span>for</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;j</span><span class=\"keyword operator assignment js\"><span>=</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;j</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span class=\"variable other object js\"><span>y</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support constant dom js\"><span>shape</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"keyword operator increment js\"><span>++</span></span><span>j</span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"variable other object js\"><span>y</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>set</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>i</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>j</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Now:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;x&#xA0;=&#xA0;0&#xA0;0&#xA0;0&#xA0;0&#xA0;0</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;0&#xA0;1&#xA0;1&#xA0;1&#xA0;0</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;0&#xA0;1&#xA0;1&#xA0;1&#xA0;0</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;0&#xA0;1&#xA0;1&#xA0;1&#xA0;0</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;0&#xA0;0&#xA0;0&#xA0;0&#xA0;0</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<p>ndarrays can be transposed, flipped, sheared and sliced in constant time per operation. They are useful for representing images, audio, volume graphics, matrices, strings and much more. They work both in node.js and with <a href=\"http://browserify.org/\">browserify</a>.</p>\n<h2 id=\"install\">Install</h2>\n<p>Install the library using <a href=\"http://npmjs.org\">npm</a>:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install&#xA0;ndarray</span></span></div>\n</code></pre>\n<p>You can also use ndarrays in a browser with any tool that follows the CommonJS/node module conventions.  The most direct way to do this is to use <a href=\"https://github.com/substack/node-browserify\">browserify</a>.  If you want live-reloading for faster debugging, check out <a href=\"https://github.com/chrisdickinson/beefy\">beefy</a>.</p>\n<h2 id=\"api\">API</h2>\n<p>Once you have ndarray installed, you can use it in your project as follows:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;ndarray&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>ndarray</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div>\n</code></pre>\n<h2 id=\"constructor\">Constructor</h2>\n<h3 id=\"-ndarray-data-shape-stride-offset-\"><code>ndarray(data[, shape, stride, offset])</code></h3>\n<p>The default <code>module.exports</code> method is the constructor for ndarrays.  It creates an n-dimensional array view wrapping an underlying storage type</p>\n<ul>\n<li><code>data</code> is a 1D array storage.  It is either an instance of <code>Array</code>, a typed array, or an object that implements <code>get(), set(), .length</code></li>\n<li><code>shape</code> is the shape of the view (Default: <code>data.length</code>)</li>\n<li><code>stride</code> is the resulting stride of the new array.  (Default: row major)</li>\n<li><code>offset</code> is the offset to start the view (Default: <code>0</code>)</li>\n</ul>\n<p><strong>Returns</strong> an n-dimensional array view of the buffer</p>\n<h2 id=\"members\">Members</h2>\n<p>The central concept in <code>ndarray</code> is the idea of a view.  The way these work is very similar to <a href=\"http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html\">SciPy&apos;s array slices</a>.  Views are affine projections to 1D storage types.  To better understand what this means, let&apos;s first look at the properties of the view object.  It has exactly 4 variables:</p>\n<ul>\n<li><code>array.data</code> - The underlying 1D storage for the multidimensional array</li>\n<li><code>array.shape</code> - The shape of the typed array</li>\n<li><code>array.stride</code> - The layout of the typed array in memory</li>\n<li><code>array.offset</code> - The starting offset of the array in memory</li>\n</ul>\n<p>Keeping a separate stride means that we can use the same data structure to support both <a href=\"http://en.wikipedia.org/wiki/Row-major_order\">row major and column major storage</a></p>\n<h2 id=\"element-access\">Element Access</h2>\n<p>To access elements of the array, you can use the <code>set/get</code> methods:</p>\n<h3 id=\"-array-get-i-j-\"><code>array.get(i,j,...)</code></h3>\n<p>Retrieves element <code>i,j,...</code> from the array.  In psuedocode, this is implemented as follows:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&#xA0;</span><span class=\"entity name function js\"><span>get</span></span><span class=\"punctuation definition parameters begin js\"><span>(</span></span><span class=\"variable parameter function js\"><span>i</span></span><span class=\"meta object delimiter js\"><span>,</span></span><span class=\"variable parameter function js\"><span>j</span></span><span class=\"meta object delimiter js\"><span>,</span></span><span>...</span><span class=\"punctuation definition parameters end js\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"keyword control js\"><span>return</span></span><span>&#xA0;</span><span class=\"variable language js\"><span>this</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support constant dom js\"><span>data</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"variable language js\"><span>this</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>offset</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"variable language js\"><span>this</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>stride</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>*</span></span><span>&#xA0;i&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"variable language js\"><span>this</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>stride</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>*</span></span><span>&#xA0;j&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"keyword operator spread js\"><span>...</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div>\n</code></pre>\n<h3 id=\"-array-set-i-j-v-\"><code>array.set(i,j,...,v)</code></h3>\n<p>Sets element <code>i,j,...</code> to <code>v</code>. Again, in psuedocode this works like this:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&#xA0;</span><span class=\"entity name function js\"><span>set</span></span><span class=\"punctuation definition parameters begin js\"><span>(</span></span><span class=\"variable parameter function js\"><span>i</span></span><span class=\"meta object delimiter js\"><span>,</span></span><span class=\"variable parameter function js\"><span>j</span></span><span class=\"meta object delimiter js\"><span>,</span></span><span>...</span><span class=\"meta object delimiter js\"><span>,</span></span><span class=\"variable parameter function js\"><span>v</span></span><span class=\"punctuation definition parameters end js\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"keyword control js\"><span>return</span></span><span>&#xA0;</span><span class=\"variable language js\"><span>this</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support constant dom js\"><span>data</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"variable language js\"><span>this</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>offset</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"variable language js\"><span>this</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>stride</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>*</span></span><span>&#xA0;i&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"variable language js\"><span>this</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>stride</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>*</span></span><span>&#xA0;j&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"keyword operator spread js\"><span>...</span></span><span>&#xA0;</span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;v</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div>\n</code></pre>\n<h3 id=\"-array-index-i-j-\"><code>array.index(i,j, ...)</code></h3>\n<p>Retrieves the index of the cell in the underlying ndarray.  In JS,</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&#xA0;</span><span class=\"entity name function js\"><span>index</span></span><span class=\"punctuation definition parameters begin js\"><span>(</span></span><span class=\"variable parameter function js\"><span>i</span></span><span class=\"meta object delimiter js\"><span>,</span></span><span class=\"variable parameter function js\"><span>j</span></span><span class=\"meta object delimiter js\"><span>,</span></span><span>&#xA0;...</span><span class=\"punctuation definition parameters end js\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"keyword control js\"><span>return</span></span><span>&#xA0;</span><span class=\"variable language js\"><span>this</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>offset</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"variable language js\"><span>this</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>stride</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>*</span></span><span>&#xA0;i&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"variable language js\"><span>this</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"variable other property js\"><span>stride</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>*</span></span><span>&#xA0;j&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"keyword operator spread js\"><span>...</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div>\n</code></pre>\n<h2 id=\"properties\">Properties</h2>\n<p>The following properties are created using Object.defineProperty and do not take up any physical memory.  They can be useful in calculations involving ndarrays</p>\n<h3 id=\"-array-dtype-\"><code>array.dtype</code></h3>\n<p>Returns a string representing the undelying data type of the ndarray.  Excluding generic data stores these types are compatible with <a href=\"https://github.com/mikolalysenko/typedarray-pool\"><code>typedarray-pool</code></a>.  This is mapped according to the following rules:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">Data type</th>\n<th style=\"text-align:left\">String</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\"><code>Int8Array</code></td>\n<td style=\"text-align:left\">&quot;int8&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:right\"><code>Int16Array</code></td>\n<td style=\"text-align:left\">&quot;int16&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:right\"><code>Int32Array</code></td>\n<td style=\"text-align:left\">&quot;int32&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:right\"><code>Uint8Array</code></td>\n<td style=\"text-align:left\">&quot;uint8&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:right\"><code>Uint16Array</code></td>\n<td style=\"text-align:left\">&quot;uint16&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:right\"><code>Uint32Array</code></td>\n<td style=\"text-align:left\">&quot;uint32&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:right\"><code>Float32Array</code></td>\n<td style=\"text-align:left\">&quot;float32&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:right\"><code>Float64Array</code></td>\n<td style=\"text-align:left\">&quot;float64&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:right\"><code>Array</code></td>\n<td style=\"text-align:left\">&quot;array&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:right\"><code>Uint8ArrayClamped</code></td>\n<td style=\"text-align:left\">&quot;uint8_clamped&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:right\"><code>Buffer</code></td>\n<td style=\"text-align:left\">&quot;buffer&quot;</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">Other</td>\n<td style=\"text-align:left\">&quot;generic&quot;</td>\n</tr>\n</tbody>\n</table>\n<p>Generic arrays access elements of the underlying 1D store using get()/set() instead of array accessors.</p>\n<h3 id=\"-array-size-\"><code>array.size</code></h3>\n<p>Returns the size of the array in logical elements.</p>\n<h3 id=\"-array-order-\"><code>array.order</code></h3>\n<p>Returns the order of the stride of the array, sorted in ascending length. The first element is the first index of the shortest stride and the last is the index the longest stride.</p>\n<h3 id=\"-array-dimension-\"><code>array.dimension</code></h3>\n<p>Returns the dimension of the array.</p>\n<h2 id=\"slicing\">Slicing</h2>\n<p>Given a view, we can change the indexing by shifting, truncating or permuting the strides.  This lets us perform operations like array reversals or matrix transpose in <strong>constant time</strong> (well, technically <code>O(shape.length)</code>, but since shape.length is typically less than 4, it might as well be).  To make life simpler, the following interfaces are exposed:</p>\n<h3 id=\"-array-lo-i-j-k-\"><code>array.lo(i,j,k,...)</code></h3>\n<p>This creates a shifted view of the array.  Think of it as taking the upper left corner of the image and dragging it inward by an amount equal to <code>(i,j,k...)</code>.</p>\n<h3 id=\"-array-hi-i-j-k-\"><code>array.hi(i,j,k,...)</code></h3>\n<p>This does the dual of <code>array.lo()</code>.  Instead of shifting from the top-left, it truncates from the bottom-right of the array, returning a smaller array object.   Using <code>hi</code> and <code>lo</code> in combination lets you select ranges in the middle of an array.</p>\n<p><strong>Note:</strong>  <code>hi</code> and <code>lo</code> do not commute.   In general:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>a</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>hi</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>lo</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span>&#xA0;&#xA0;</span><span class=\"keyword operator comparison js\"><span>!=</span></span><span>&#xA0;&#xA0;</span><span class=\"variable other object js\"><span>a</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>lo</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>hi</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>3</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div>\n</code></pre>\n<h3 id=\"-array-step-i-j-k-\"><code>array.step(i,j,k...)</code></h3>\n<p>Changes the stride length by rescaling.  Negative indices flip axes.  For example, here is how you create a reversed view of a 1D array:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;reversed&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>a</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>step</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div>\n</code></pre>\n<p>You can also change the step size to be greater than 1 if you like, letting you skip entries of a list.  For example, here is how to split an array into even and odd components:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;evens&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>a</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>step</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;odds&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>a</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>lo</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>step</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div>\n</code></pre>\n<h3 id=\"-array-transpose-p0-p1-\"><code>array.transpose(p0, p1, ...)</code></h3>\n<p>Finally, for higher dimensional arrays you can transpose the indices without replicating the data.  This has the effect of permuting the shape and stride values and placing the result in a new view of the same data.  For example, in a 2D array you can calculate the matrix transpose by:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>M</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>transpose</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div>\n</code></pre>\n<p>Or if you have a 3D volume image, you can shift the axes using more generic transformations:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>volume</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>transpose</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>2</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div>\n</code></pre>\n<h3 id=\"-array-pick-p0-p1-\"><code>array.pick(p0, p1, ...)</code></h3>\n<p>You can also pull out a subarray from an ndarray by fixing a particular axis.  The way this works is you specify the direction you are picking by giving a list of values.  For example, if you have an image stored as an nxmx3 array you can pull out the channel as follows:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;red&#xA0;&#xA0;&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>image</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>pick</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;green&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>image</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>pick</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;blue&#xA0;&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>image</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>pick</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant language null js\"><span>null</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>2</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div>\n</code></pre>\n<p>As the above example illustrates, passing a negative or non-numeric value to a coordinate in pick skips that index.</p>\n<h2 id=\"more-information\">More information</h2>\n<p>For more discussion about ndarrays, here are some talks, tutorials and articles about them:</p>\n<ul>\n<li><a href=\"http://mikolalysenko.github.io/ndarray-presentation/\">ndarray presentation</a></li>\n<li><a href=\"http://0fps.wordpress.com/2013/05/22/implementing-multidimensional-arrays-in-javascript/\">Implementing multidimensional arrays in JavaScript</a></li>\n<li><a href=\"http://0fps.wordpress.com/2013/05/28/cache-oblivious-array-operations/\">Cache oblivious array operations</a></li>\n<li><a href=\"https://github.com/mikolalysenko/ndarray-experiments\">Some experiments</a></li>\n</ul>\n<h2 id=\"credits\">Credits</h2>\n<p>(c) 2013 Mikola Lysenko. MIT License</p>\n"}