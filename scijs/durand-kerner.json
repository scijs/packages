{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/scijs/durand-kerner\">durand-kerner</a><div class=\"contrib\"></div></h1>\n<p>Finds all the roots of a polynomial by <a href=\"http://en.wikipedia.org/wiki/Durand%E2%80%93Kerner_method\">Weierstrass&apos; method</a> (or known in Abramowitz&amp;Stegun as the Durand-Kerner method).  This is basically a generalization of Newton&apos;s method that works for multiple roots.</p>\n<p><a href=\"http://travis-ci.org/scijs/durand-kerner\"></a></p>\n<h2 id=\"example\">Example</h2>\n<p>To find the roots for <code>1 + 1*x - 1*x^2</code>:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;findRoots&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>durand-kerner</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;roots&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>findRoots</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;Now:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;roots[0]&#xA0;=&#xA0;real&#xA0;part&#xA0;of&#xA0;roots</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;roots[1]&#xA0;=&#xA0;imaginary&#xA0;part&#xA0;of&#xA0;roots</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>for</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;i</span><span class=\"keyword operator assignment js\"><span>=</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;i</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span class=\"variable other object js\"><span>roots</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support constant js\"><span>length</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"keyword operator increment js\"><span>++</span></span><span>i</span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"entity name type object js console\"><span>console</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js console\"><span>log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>roots</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span><span>[</span></span><span>i</span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>+</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;roots</span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta brace square js\"><span>]</span><span>[</span></span><span>i</span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>i</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div>\n</code></pre>\n<h3 id=\"output\">Output</h3>\n<pre><code> 1.618033988749895+0i\n-0.6180339887498949+0i\n</code></pre><h2 id=\"install\">Install</h2>\n<p>Install using npm:</p>\n<pre><code>npm install durand-kerner\n</code></pre><h2 id=\"api\">API</h2>\n<h4 id=\"-require-durand-kerner-r_coeff-i_coeff-n_iters-tolerance-initial-\"><code>require(&quot;durand-kerner&quot;)(r_coeff[, i_coeff, n_iters, tolerance, initial])</code></h4>\n<p>Finds the roots of a polynomial whose real coefficients are given by <code>r_coeff</code> and imaginary coefficients by <code>i_coeff</code>.</p>\n<ul>\n<li><code>r_coeff</code> - the real part of the polynomial&apos;s coefficients, stored in an array</li>\n<li><code>i_coeff</code> - the imaginary part of the polynomial&apos;s coefficients (default all 0)</li>\n<li><code>n_iters</code> - Maximum number of iterations to run before bailout. Default is <code>100 * n * n</code></li>\n<li><code>tolerance</code> - Stopping threshold.  Default is <code>1e-6</code></li>\n<li><code>initial</code> - Initial guess for solution vector (must have the same length as <code>r_coeff</code>).  This also gets the solution (optional)</li>\n</ul>\n<p><strong>Returns</strong> An array of roots.  </p>\n<h2 id=\"license\">License</h2>\n<p>(c) 2013 Mikola Lysenko. MIT License</p>\n"}