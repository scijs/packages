{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/scijs/ndarray-fft\">ndarray-fft</a><div class=\"contrib\"></div></h1>\n<p><a href=\"https://travis-ci.org/scijs/ndarray-fft\"></a></p>\n<blockquote>\n<p>A fast Fourier transform implementation for <a href=\"https://github.com/mikolalysenko/ndarray\">ndarrays</a>.  You can use this to do image processing operations on big, higher dimensional typed arrays in JavaScript.</p>\n</blockquote>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;zeros&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>zeros</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;ops&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>ndarray-ops</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;fft&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>ndarray-fft</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;x&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>random</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>zeros</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>256</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>256</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;y&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>random</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>zeros</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>256</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>256</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Forward&#xA0;transform&#xA0;x/y</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>fft</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;x</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;y</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Invert&#xA0;transform</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>fft</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"keyword operator js\"><span>-</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;x</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;y</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div>\n</code></pre>\n<h2 id=\"install\">Install</h2>\n<p>Via npm:</p>\n<pre><code>npm install ndarray-fft\n</code></pre><h3 id=\"-require-ndarray-fft-dir-x-y-\"><code>require(&quot;ndarray-fft&quot;)(dir, x, y)</code></h3>\n<p>Executes a fast Fourier transform on the complex valued array x/y.  </p>\n<ul>\n<li><code>dir</code> - Either +/- 1.  Determines whether to use a forward or inverse FFT</li>\n<li><code>x</code> the real part of the signal, encoded as an ndarray</li>\n<li><code>y</code> the imaginary part of the signal, encoded as an ndarray</li>\n</ul>\n<p><code>x</code> and <code>y</code> are transformed in place.</p>\n<p><strong>Note</strong> This code is fastest when the components of the shapes arrays are all powers of two.  For non-power of two shapes, Bluestein&apos;s fft is used which is somewhat slower.</p>\n<p><strong>Note2</strong> The inverse FFT is scaled by 1/N, forward FFT is unnormalized.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>(c) 2013 Mikola Lysenko.  MIT License.</p>\n<p>Radix 2 FFT based on code by Paul Bourke.</p>\n"}