{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/scijs/ndarray-tests\">ndarray-tests</a><div class=\"contrib\"></div></h1>\n<p><a href=\"https://travis-ci.org/scijs/ndarray-tests\"></a> <a href=\"http://badge.fury.io/js/ndarray-tests\"></a> <a href=\"https://david-dm.org/scijs/ndarray-tests\"></a></p>\n<p>Test numerical properties of ndarrays</p>\n<h2 id=\"intro\">Intro</h2>\n<p>I very quickly got sick of testing matrix equality by hand over and over. This package implements methods for testing near-equality and other properties of ndarrays. Its goal is to be a set of test helpers so that it&apos;s not necessary to hard-code numbers. Decompositions aren&apos;t always unique (e.g. orthogonal columns may be chosen arbitrarily in some cases as long as they&apos;re orthogonal), so it&apos;s probably better to test properties than numbers.</p>\n<p>Note that some obvious tests are ommitted because they&apos;re one-liners.</p>\n<p>Please feel free to make any suggestions/contributions for how to more clearly and consistently define specific property tests.</p>\n<h2 id=\"usage\">Usage</h2>\n<p>Require the library and use the methods described below. The onFalse callback is optional and serves only to simplify passing data while allowing the function to return a boolean. Tolerances are always assumed to be zero (exact equality) unless otherwise specified.</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;ndtest&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>ndarray-tests</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>ndtest</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>matrixIsOrthogonal</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>A</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>B</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>1e-4</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;returns&#xA0;boolean</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>&#xA0;Returns&#xA0;boolean&#xA0;and&#xA0;if&#xA0;it&#xA0;fails,&#xA0;passes&#xA0;explanation&#xA0;to&#xA0;callback</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>ndtest</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>matrixIsOrthogonal</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>A</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>B</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"constant numeric js\"><span>1e-4</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span class=\"punctuation definition parameters begin js\"><span>(</span></span><span class=\"variable parameter function js\"><span>message</span></span><span class=\"punctuation definition parameters end js\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta method-call js\"><span>&#xA0;&#xA0;</span><span class=\"entity name type object js console\"><span>console</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js console\"><span>log</span></span><span class=\"meta brace round js\"><span>(</span></span><span>message</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span><span class=\"meta brace round js\"><span>)</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span></span></div>\n</code></pre>\n<h3 id=\"methods-\">Methods:</h3>\n<h5 id=\"same-dimensions-\">same dimensions:</h5>\n<p>Keep it simple and just ask, e.g.: <code>assert( a.dimension === b.dimension )</code></p>\n<h5 id=\"same-shape-\">same shape:</h5>\n<p>Keep it simple and just ask, e.g.: <code>assert.deepEqual( a.shape, b.shape )</code></p>\n<p>================</p>\n<h5 id=\"-equal-a-b-tol-onfalse-\"><code>equal( a, b [, tol] [, onFalse] )</code></h5>\n<p>Test whether the maximum element-wise difference between <code>a</code> and <code>b</code> (the L-infinity norm of <code>(a - b)</code>) is less than the tolerance. Works on arrays of any dimension. The test will return false if any entry is NaN.</p>\n<h5 id=\"-approximatelyequal-a-b-tol-onfalse-\"><code>approximatelyEqual( a, b [, tol] [, onFalse] )</code></h5>\n<p>Alias for <code>equal</code>, just to make things read clearly.</p>\n<p>================</p>\n<h4 id=\"vector-tests-\">Vector tests:</h4>\n<h5 id=\"-vectorisnormalized-a-tol-onfalse-\"><code>vectorIsNormalized( a [, tol], [, onFalse] )</code></h5>\n<p>Test whether the L-2 norm of <code>a</code> is within <code>tol</code> of unity. </p>\n<h5 id=\"-vectorsareorthogonal-a-b-tol-onfalse-\"><code>vectorsAreOrthogonal( a, b, [, tol], [, onFalse] )</code></h5>\n<p>Test whether the inner product of vectors a and <code>b</code> is within <code>tol</code> of zero. </p>\n<h5 id=\"-vectorsareorthonormal-a-b-tol-onfalse-\"><code>vectorsAreOrthonormal( a, b, [, tol], [, onFalse] )</code></h5>\n<p>Test whether vectors <code>a</code> and <code>b</code> are both normalized and orthogonal using <code>vectorIsNormalized</code> and <code>vectorsAreOrthogonal</code>.</p>\n<p>================</p>\n<h4 id=\"matrix-tests-\">Matrix tests:</h4>\n<h5 id=\"-matrixissymmetric-a-tol-onfalse-\"><code>matrixIsSymmetric( a [, tol], [, onFalse] )</code></h5>\n<p>Test for element-wise symmetry. Returns false if the difference between any element and its counterpart is greater than the tolerance.</p>\n<h5 id=\"-matrixcolsarenormalized-a-tol-onfalse-\"><code>matrixColsAreNormalized( a [, tol], [, onFalse] )</code></h5>\n<p>Test whether the L2 norm of every column is within <code>tol</code> of 1.</p>\n<h5 id=\"-matrixcolsareorthogonal-a-tol-onfalse-\"><code>matrixColsAreOrthogonal( a [, tol], [, onFalse] )</code></h5>\n<p>Test whether the pairwise inner product of all column pairs is less than <code>tol</code>.</p>\n<h5 id=\"-matrixisorthogonal-a-tol-onfalse-\"><code>matrixIsOrthogonal( a [, tol], [, onFalse] )</code></h5>\n<p>Checks for squareness, column normality, and pair-wise column orthogonality to check if the matrix is orthogonal. <code>tol</code> is passed to the <code>matrixColsAreNormal</code> and <code>matrixColsAreOrthogonal</code></p>\n<h5 id=\"-matrixisuppertriangular-a-tol-onfalse-\"><code>matrixIsUpperTriangular( a, [, tol] [, onFalse] )</code></h5>\n<p>Check whether all entries below the diagonal are within <code>tol</code> of zero. Works on tall and wide two-dimensional ndarrays.</p>\n<h5 id=\"-matrixislowertriangular-a-tol-onfalse-\"><code>matrixIsLowerTriangular( a, [, tol] [, onFalse] )</code></h5>\n<p>Check whether all entries above the diagonal are within <code>tol</code> of zero. Works on tall and wide two-dimensional ndarrays.</p>\n<h3 id=\"to-do-\">TO DO:</h3>\n<ul>\n<li><code>diagonal( a, [, tol] [, onFalse] )</code></li>\n<li>separate column methods to allow testing of specific pair-wise columns (or maybe that&apos;s simple enough that it&apos;s unnecessary)</li>\n</ul>\n<h2 id=\"credits\">Credits</h2>\n<p>(c) 2015 Ricky Reusser. MIT License</p>\n"}