{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/scijs/ndarray-ops\">ndarray-ops</a><div class=\"contrib\"></div></h1>\n<p>A collection of common mathematical operations for <a href=\"http://github.com/mikolalysenko/ndarray\">ndarrays</a>.  Implemented using <a href=\"http://github.com/mikolalysenko/cwise\">cwise</a></p>\n<h2 id=\"usage\">Usage</h2>\n<p>First, install the library using npm:</p>\n<pre><code>npm install ndarray-ops\n</code></pre><p>Then you can import the library by doing:</p>\n<pre><code>var ops = require(&quot;ndarray-ops&quot;)\n</code></pre><p>Then you can use the functions as in the following example:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>First,&#xA0;import&#xA0;libraries</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;ndarray&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>ndarray</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;ops&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>ndarray-ops</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Next,&#xA0;create&#xA0;some&#xA0;arrays</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;a&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>ndarray</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta class instance constructor\"><span class=\"keyword operator new js\"><span>new</span></span><span>&#xA0;</span><span class=\"entity name type instance js\"><span>Float32Array</span></span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant numeric js\"><span>128</span></span><span class=\"keyword operator js\"><span>*</span></span><span class=\"constant numeric js\"><span>128</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;b&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>ndarray</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta class instance constructor\"><span class=\"keyword operator new js\"><span>new</span></span><span>&#xA0;</span><span class=\"entity name type instance js\"><span>Float32Array</span></span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant numeric js\"><span>128</span></span><span class=\"keyword operator js\"><span>*</span></span><span class=\"constant numeric js\"><span>128</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;c&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;</span><span class=\"meta function-call js\"><span class=\"entity name function js\"><span>ndarray</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span class=\"meta class instance constructor\"><span class=\"keyword operator new js\"><span>new</span></span><span>&#xA0;</span><span class=\"entity name type instance js\"><span>Float32Array</span></span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant numeric js\"><span>128</span></span><span class=\"keyword operator js\"><span>*</span></span><span class=\"constant numeric js\"><span>128</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Initialize&#xA0;b&#xA0;with&#xA0;some&#xA0;random&#xA0;numbers:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>random</span></span><span class=\"meta brace round js\"><span>(</span></span><span>b</span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Set&#xA0;c&#xA0;to&#xA0;a&#xA0;constant&#xA0;1</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>assigns</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>c</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1.0</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Add&#xA0;b&#xA0;and&#xA0;c,&#xA0;store&#xA0;result&#xA0;in&#xA0;a:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>add</span></span><span class=\"meta brace round js\"><span>(</span></span><span>a</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;b</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;c</span><span class=\"meta brace round js\"><span>)</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Multiply&#xA0;a&#xA0;by&#xA0;0.5&#xA0;in&#xA0;place</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>mulseq</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>a</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0.5</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"comment line double-slash js\"><span class=\"punctuation definition comment js\"><span>//</span></span><span>Print&#xA0;some&#xA0;statistics&#xA0;about&#xA0;a:</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"entity name type object js console\"><span>console</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js console\"><span>log</span></span><span class=\"meta brace round js\"><span>(</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>inf(a)&#xA0;=&#xA0;</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>inf</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>a</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>sup(a)&#xA0;=&#xA0;</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>sup</span></span><span class=\"meta brace round js\"><span>(</span></span><span>a</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>argmin(a)&#xA0;=&#xA0;</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>argmin</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>a</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>argmax(a)&#xA0;=&#xA0;</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>argmax</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>a</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;</span><span class=\"string quoted double js\"><span class=\"punctuation definition string begin js\"><span>&quot;</span></span><span>norm1(a)&#xA0;=&#xA0;</span><span class=\"punctuation definition string end js\"><span>&quot;</span></span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>norm1</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>a</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span><span class=\"meta brace round js\"><span>)</span></span></span></div>\n</code></pre>\n<h2 id=\"conventions\">Conventions</h2>\n<p>This library implements component-wise operations for all of the operators and Math.* functions in JS, along with a few commonly used aggregate operations.  Most of the functions in the library work by applying some symmetric binary operator to a pair of arrays. You call them like this:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function dom js\"><span>add</span></span><span class=\"meta brace round js\"><span>(</span></span><span>dest</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;arg1</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;arg2</span><span class=\"meta brace round js\"><span>)</span></span></span></div>\n</code></pre>\n<p>Which translates into code that works (approximately) like this:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>for</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;i</span><span class=\"keyword operator assignment js\"><span>=</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;i</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span class=\"variable other object js\"><span>dest</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support constant dom js\"><span>shape</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"keyword operator increment js\"><span>++</span></span><span>i</span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;dest</span><span class=\"meta brace square js\"><span>[</span></span><span>i</span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;arg1</span><span class=\"meta brace square js\"><span>[</span></span><span>i</span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;arg2</span><span class=\"meta brace square js\"><span>[</span></span><span>i</span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div>\n</code></pre>\n<p>It is up to you to specify where the result gets store.  This library does not create new arrays for you to avoid performing expensive intermediate allocations.  There are also a few other variations:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>addeq</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>dest</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;arg1</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div>\n</code></pre>\n<p>Operators with the -eq suffix perform an assignment.</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>for</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;i</span><span class=\"keyword operator assignment js\"><span>=</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;i</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span class=\"variable other object js\"><span>dest</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support constant dom js\"><span>shape</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"keyword operator increment js\"><span>++</span></span><span>i</span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;dest</span><span class=\"meta brace square js\"><span>[</span></span><span>i</span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator assignment compound js\"><span>+=</span></span><span>&#xA0;arg1</span><span class=\"meta brace square js\"><span>[</span></span><span>i</span><span class=\"meta brace square js\"><span>]</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div>\n</code></pre>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>adds</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>dest</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;arg1</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1.0</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div>\n</code></pre>\n<p>The -s suffix denotes scalar/broadcast operations; so the above would translate to:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>for</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;i</span><span class=\"keyword operator assignment js\"><span>=</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;i</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span class=\"variable other object js\"><span>dest</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support constant dom js\"><span>shape</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"keyword operator increment js\"><span>++</span></span><span>i</span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;dest</span><span class=\"meta brace square js\"><span>[</span></span><span>i</span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator assignment js\"><span>=</span></span><span>&#xA0;arg1</span><span class=\"meta brace square js\"><span>[</span></span><span>i</span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator js\"><span>+</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1.0</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div>\n</code></pre>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>addseq</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>dest</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1.0</span></span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div>\n</code></pre>\n<p>The -seq suffix is basically the combination of the above, and translates to:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"keyword control js\"><span>for</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"storage type var js\"><span>var</span></span><span>&#xA0;i</span><span class=\"keyword operator assignment js\"><span>=</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;i</span><span class=\"keyword operator comparison js\"><span>&lt;</span></span><span class=\"variable other object js\"><span>dest</span></span><span class=\"meta delimiter property period js\"><span>.</span></span><span class=\"support constant dom js\"><span>shape</span></span><span class=\"meta brace square js\"><span>[</span></span><span class=\"constant numeric js\"><span>0</span></span><span class=\"meta brace square js\"><span>]</span></span><span class=\"punctuation terminator statement js\"><span>;</span></span><span>&#xA0;</span><span class=\"keyword operator increment js\"><span>++</span></span><span>i</span><span class=\"meta brace round js\"><span>)</span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;dest</span><span class=\"meta brace square js\"><span>[</span></span><span>i</span><span class=\"meta brace square js\"><span>]</span></span><span>&#xA0;</span><span class=\"keyword operator assignment compound js\"><span>+=</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1.0</span></span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"meta brace curly js\"><span>}</span></span></span></div>\n</code></pre>\n<p>The following operators follow this rule:</p>\n<ul>\n<li>add[,s,eq,seq] - Addition, <code>+</code></li>\n<li>sub[,s,eq,seq] - Subtraction, <code>-</code></li>\n<li>mul[,s,eq,seq] - Multiplication, <code>*</code></li>\n<li>div[,s,eq,seq] - Division, <code>/</code></li>\n<li>mod[,s,eq,seq] - Modulo, <code>%</code></li>\n<li>band[,s,eq,seq] - Bitwise And, <code>&amp;</code></li>\n<li>bor[,s,eq,seq] - Bitwise Or, <code>&amp;</code></li>\n<li>bxor[,s,eq,seq] - Bitwise Xor, <code>^</code></li>\n<li>lshift[,s,eq,seq] - Left shift, <code>&lt;&lt;</code></li>\n<li>rshift[,s,eq,seq] - Signed right shift, <code>&gt;&gt;</code></li>\n<li>rrshift[,s,eq,seq] - Unsigned right shift, <code>&gt;&gt;&gt;</code></li>\n<li>lt[,s,eq,seq] - Less than, <code>&lt;</code></li>\n<li>gt[,s,eq,seq] - Greater than, <code>&gt;</code></li>\n<li>leq[,s,eq,seq] - Less than or equal, <code>&lt;=</code></li>\n<li>geq[,s,eq,seq] - Greater than or equal <code>&gt;=</code></li>\n<li>eq[,s,eq,seq] - Equals, <code>===</code></li>\n<li>neq[,s,eq,seq] - Not equals, <code>!==</code></li>\n<li>and[,s,eq,seq] - Boolean And, <code>&amp;&amp;</code></li>\n<li>or[,s,eq,seq] - Boolean Or, <code>||</code></li>\n<li>max[,s,eq,seq] - Maximum, <code>Math.max</code></li>\n<li>min[,s,eq,seq] - Minimum, <code>Math.min</code></li>\n</ul>\n<h2 id=\"special-cases\">Special Cases</h2>\n<p>There are a few corner cases that follow slightly different rules.  These can be grouped using the following general categories:</p>\n<h3 id=\"assignment\">Assignment</h3>\n<p>There are two assignment operators:</p>\n<ul>\n<li>assign</li>\n<li>assigns</li>\n</ul>\n<p><code>ops.assign(dest, src)</code> copies one array into another, while <code>ops.assigns(dest, val)</code> broadcasts a scalar to all elements of an array.</p>\n<h3 id=\"nullary-operators\">Nullary operators</h3>\n<p>Nullary operators only take on argument for the array they are assigning to, and don&apos;t have any variations.  Currently there is only one of these:</p>\n<ul>\n<li>random - Sets each element of an array to a random scalar between 0 and 1, <code>Math.random()</code></li>\n</ul>\n<h3 id=\"unary-operators\">Unary operators</h3>\n<p>Unary operators have one of two forms, they can be written as either:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>abs</span></span><span class=\"meta brace round js\"><span>(</span></span><span>dest</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;arg</span><span class=\"meta brace round js\"><span>)</span></span></span></div>\n</code></pre>\n<p>Or:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"variable other object js\"><span>ops</span></span><span class=\"meta method-call js\"><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"entity name function js\"><span>abseq</span></span><span class=\"punctuation definition arguments begin js\"><span>(</span></span><span>dest</span><span class=\"punctuation definition arguments end js\"><span>)</span></span></span></span></div>\n</code></pre>\n<p>The former version sets dest = |arg|, while in the latter the operation is applied in place.  ndarray-ops exposes the following unary operators:</p>\n<ul>\n<li>not[,eq] - Boolean not, <code>!</code></li>\n<li>bnot[,eq] - Bitwise not, <code>~</code></li>\n<li>neg[,eq] - Negative, <code>-</code></li>\n<li>recip[,eq] - Reciprocal, <code>1.0/</code></li>\n<li>abs[,eq] - Absolute value, <code>Math.abs</code></li>\n<li>acos[,eq] - Inverse cosine, <code>Math.acos</code></li>\n<li>asin[,eq] - Inverse sine, <code>Math.asin</code></li>\n<li>atan[,eq] - Inverse tangent, <code>Math.atan</code></li>\n<li>ceil[,eq] - Ceiling, <code>Math.ceil</code></li>\n<li>cos[,eq] - Cosine, <code>Math.cos</code></li>\n<li>exp[,eq] - Exponent, <code>Math.exp</code></li>\n<li>floor[,eq] - Floor, <code>Math.floor</code></li>\n<li>log[,eq] - Logarithm, <code>Math.log</code></li>\n<li>round[,eq] - Round, <code>Math.round</code></li>\n<li>sin[,eq] - Sine, <code>Math.sin</code></li>\n<li>sqrt[,eq] - Square root, <code>Math.sqrt</code></li>\n<li>tan[,eq] - Tangent, <code>Math.tan</code></li>\n</ul>\n<h3 id=\"non-symmetric-binary-operators\">Non-symmetric binary operators</h3>\n<p>There are also a few non-symmetric binary operators.  These operators have an extra suffix <code>op</code> which flips the order of the arguments.  There are only two of these:</p>\n<ul>\n<li>atan2[,s,eq,seq,op,sop,opeq,sopeq]</li>\n<li>pow[,s,eq,seq,op,sop,opeq,sopeq]</li>\n</ul>\n<h3 id=\"map-reduce-aggregate-operators\">Map-reduce (aggregate) operators</h3>\n<p>Finally, there are aggregate operators that take an array as input and compute some aggregate result or summary.  These functions don&apos;t have any special suffixes and all of them take a single array as input.</p>\n<ul>\n<li>equals - Check if two ndarrays are equal</li>\n<li>any - Check if any element of the array is truthy</li>\n<li>all - Checks if any element of the array is falsy</li>\n<li>sum - Sums all elements of the array</li>\n<li>prod - Multiplies all elements of the array</li>\n<li>norm2squared - Computes the squared L2 norm</li>\n<li>norm2 - Computes the L2 norm</li>\n<li>norminf - Computes the L-infinity norm</li>\n<li>norm1 - Computs the L1 norm</li>\n<li>sup - Max element in array</li>\n<li>inf - Min element in array</li>\n<li>argmin - Index of min element</li>\n<li>argmax - Index of max element</li>\n</ul>\n<h2 id=\"credits\">Credits</h2>\n<p>(c) 2013 Mikola Lysenko. MIT License</p>\n"}