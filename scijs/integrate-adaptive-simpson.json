{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/scijs/integrate-adaptive-simpson\">integrate-adaptive-simpson   </a><div class=\"contrib\"></div></h1>\n<blockquote>\n<p>Compute a definite integral of one variable using <a href=\"https://en.wikipedia.org/wiki/Simpson%27s_rule\">Simpson&apos;s Rule</a> with adaptive quadrature</p>\n</blockquote>\n<h2 id=\"introduction\">Introduction</h2>\n<p>This module computes the definite integral </p><p align=\"center\"><img alt=\"undefined\" valign=\"middle\" src=\"https://raw.githubusercontent.com/scijs/integrate-adaptive-simpson/master/docs/images/int_ab-fx-dx-a1ac3b24ed.png\" width=\"99.5\" height=\"54.5\"></p> using <a href=\"https://en.wikipedia.org/wiki/Romberg%27s_method\">Romberg Integration</a> based on <a href=\"https://en.wikipedia.org/wiki/Simpson%27s_rule\">Simpson&apos;s Rule</a>. That is, it uses <a href=\"https://en.wikipedia.org/wiki/Richardson_extrapolation\">Richardson Extrapolation</a> to estimate the error and recursively subdivide intervals until the error tolerance is met. The code is adapted from the pseudocode in <a href=\"http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf\">Romberg Integration and Adaptive Quadrature</a>.<p></p>\n<h2 id=\"install\">Install</h2>\n<pre><code class=\"lang-bash\"><div class=\"line\"><span class=\"source shell\"><span>$&#xA0;npm&#xA0;install&#xA0;integrate-adaptive-simpson</span></span></div>\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<p>Other quadrature methods may competitive or superior, but compared with something like <a href=\"https://github.com/scijs/integrate-simpson\">regular Simpson&apos;s Rule Ingration</a>, this module is reasonably efficient and robust in the presence of difficulties like oscillatory functions. Consider the definite integral </p><p align=\"center\"><img alt=\"undefined\" valign=\"middle\" src=\"https://raw.githubusercontent.com/scijs/integrate-adaptive-simpson/master/docs/images/int_0011-frac1xcosleftfrac1xrightdx-d7e8731b7d.png\" width=\"177\" height=\"54.5\"></p><p></p>\n<p>This function oscillates and diverges near the origin:</p>\n<p></p><p align=\"center\"><img width=\"500\" height=\"368\" alt=\"1/x * cos(1/x) on a linear scale\" src=\"https://raw.githubusercontent.com/scijs/integrate-adaptive-simpson/master/docs/images/oscillatory-linlin.png\"></p>\n<p>On a log-linear scale, this looks like:</p>\n<p></p><p align=\"center\"><img width=\"500\" height=\"368\" alt=\"1/x * cos(1/x) on a log-linear scale\" src=\"https://raw.githubusercontent.com/scijs/integrate-adaptive-simpson/master/docs/images/oscillatory-loglin.png\"></p>\n<p>Achieving an absolute error on the order of <img alt=\"undefined\" valign=\"middle\" src=\"https://raw.githubusercontent.com/scijs/integrate-adaptive-simpson/master/docs/images/1-cdot-10-8-09bd84e939.png\" width=\"70\" height=\"20.5\"> with regular Simpson&apos;s Rule integration:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"meta function js\"><span class=\"storage type function js\"><span>function</span></span><span>&#xA0;</span><span class=\"entity name function js\"><span>f</span></span><span class=\"punctuation definition parameters begin js\"><span>(</span></span><span class=\"variable parameter function js\"><span>x</span></span><span class=\"punctuation definition parameters end js\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta brace curly js\"><span>{</span></span><span>&#xA0;</span><span class=\"keyword control js\"><span>return</span></span><span>&#xA0;</span><span class=\"variable other object js\"><span>Math</span></span><span class=\"meta delimiter method period js\"><span>.</span></span><span class=\"support function js\"><span>cos</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"constant numeric js\"><span>1</span></span><span class=\"keyword operator js\"><span>/</span></span><span>x</span><span class=\"meta brace round js\"><span>)</span></span><span class=\"keyword operator js\"><span>/</span></span><span>x&#xA0;</span><span class=\"meta brace curly js\"><span>}</span></span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>integrate-simpson</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span><span>(</span></span><span>&#xA0;f</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0.01</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>29118</span></span><span>&#xA0;</span><span class=\"meta brace round js\"><span>)</span></span></span></div>\n</code></pre>\n<p>requires (determined by trial and error to match the error of the adaptive method) about 29118 function evaluations. The same integral computed with adaptive integration:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span class=\"support function js\"><span>require</span></span><span class=\"meta brace round js\"><span>(</span></span><span class=\"string quoted single js\"><span class=\"punctuation definition string begin js\"><span>&apos;</span></span><span>integrate-adaptive-simpson</span><span class=\"punctuation definition string end js\"><span>&apos;</span></span></span><span class=\"meta brace round js\"><span>)</span><span>(</span></span><span>&#xA0;f</span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>0.01</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>1</span></span><span class=\"meta delimiter object comma js\"><span>,</span></span><span>&#xA0;</span><span class=\"constant numeric js\"><span>3.1e-6</span></span><span>&#xA0;</span><span class=\"meta brace round js\"><span>)</span></span></span></div>\n</code></pre>\n<p>requires 2077 function evaluations, a savings of 93%!</p>\n<p>Computation of a more modest integral like <img alt=\"undefined\" valign=\"middle\" src=\"https://raw.githubusercontent.com/scijs/integrate-adaptive-simpson/master/docs/images/int_0pi-sinxdx-073b62952c.png\" width=\"108\" height=\"28.5\"> may still save about a factor of two on function evaluations (17 for adaptive vs. 45 for regular Simpson&apos;s Rule to acheive an absolute error of <img alt=\"undefined\" valign=\"middle\" src=\"https://raw.githubusercontent.com/scijs/integrate-adaptive-simpson/master/docs/images/1-cdot-10-8-09bd84e939.png\" width=\"70\" height=\"20.5\">). See <a href=\"http://github.com/scijs/integrate-adaptive-simpson/blob/master/examples/comparison.js\">examples/comparison.js</a> for a comparison. Of course the benefit is not needing to tell the algorithm in advance that it may be an expensive function to integrate, making it a not-unreasonable black-box integrator.</p>\n<h2 id=\"api\">API</h2>\n<h4 id=\"-require-integrate-adaptive-simpson-f-a-b-tol-maxdepth-\"><code>require(&apos;integrate-adaptive-simpson&apos;)( f, a, b [, tol, maxdepth]] )</code></h4>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li><code>f</code>: The function to be integrated. A function of one variable that returns a value.</li>\n<li><code>a</code>: The lower limit of integration, <img alt=\"undefined\" valign=\"middle\" src=\"https://raw.githubusercontent.com/scijs/integrate-adaptive-simpson/master/docs/images/a-a1c2708a7a.png\" width=\"15\" height=\"13\">.</li>\n<li><code>b</code>: The upper limit of integration, <img alt=\"undefined\" valign=\"middle\" src=\"https://raw.githubusercontent.com/scijs/integrate-adaptive-simpson/master/docs/images/b-5891343d52.png\" width=\"13\" height=\"18\">.</li>\n<li><code>tol</code>: The relative error required for an interval to be subdivided, based on Richardson extraplation. Default tolerance is <code>1e-8</code>. Be careful&#x2014;the total accumulated error may be significantly less and result in more function evaluations than necessary.</li>\n<li><code>maxdepth</code>: The maximum recursion depth. Default depth is <code>20</code>. If reached, computation continues and a warning is output to the console.</li>\n</ul>\n<p><strong>Returns</strong>: The computed value of the definite integral.</p>\n<h2 id=\"references\">References</h2>\n<p>Colins, C., <a href=\"http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf\">Romberg Integration and Adaptive Quadrature Course Notes</a>.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>(c) 2015 Ricky Reusser. MIT License</p>\n"}